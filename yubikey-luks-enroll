#!/bin/sh
SLOT=7
DISK="/dev/sda3"
CLEAR_SLOT=0
DBG=0
YUBIKEY_LUKS_SLOT=2 #Set this in case the value is missing in ykluks.cfg
CONFIG_FILE="/etc/ykluks.cfg"
FIDO2_RELYING_PARTY="yubikey-luks.cornelinux.github.com"
FIDO2_USERNAME="ykluks"
FIDO2_CREDENTIAL_ID=
FIDO2_CREDENTIAL_PUBKEY=

set -e
. $CONFIG_FILE

fido2_device() {
    fido2-token -L | sed 's/:.*//'
}

sha256_base64() {
    # Computes SHA256 over the given argument, converts the hash to a binary blob, and returns the
    # base64 encoding of said blob.
    /usr/bin/printf $(printf '%s' "$1" | sha256sum | awk '{print $1}' | sed -e 's/\([0-9a-f]\{2\}\)/\\x\1/g') | base64 -w0
}

fido2_salt_from_blkid() {
    sha256_base64 "$(blkid -o value "$1" | head -1)"
}

fido2_update_config() {
    if ! grep -qE "[^\\t ]*FIDO2_$1=" $CONFIG_FILE ; then
        printf '\nFIDO2_%s="%s"\n' "$1" "$2" >> $CONFIG_FILE
    else
        local sed_script=$(printf 's;[^\\t ]*FIDO2_%s=.*$;FIDO2_%s="%s";' $1 $1 $2)
        sed -i -e "$sed_script" $CONFIG_FILE
    fi
}

fido2_temp_keyfile() {
    local keyfile=$(mktemp)
    echo "$FIDO2_CREDENTIAL_PUBKEY" | base64 -d > $keyfile
    echo $keyfile
}

fido2_create_credential() {
    local challenge=$(dd if=/dev/urandom bs=1 count=32 2> /dev/null | base64)
    local user_id=$(printf '%s' "$FIDO2_USERNAME" | base64)
    local params="$challenge\n$FIDO2_RELYING_PARTY\n$FIDO2_USERNAME\n$user_id"
    if [ "$DBG" = "1" ]; then echo "Credential parameters: \n$params\n"; fi

    local cred=$(echo "$params" | fido2-cred -M $(fido2_device) | fido2-cred -V)
    if [ "$DBG" = "1" ]; then echo "Credential response: \n$cred\n"; fi
    if [ -z "$cred" ] ; then
        return 1
    fi

    # We base64 encode the already PEM encoded pubkey to fit it on one line in the config.
    FIDO2_CREDENTIAL_PUBKEY="$(printf '%s\n' "$cred" | tail -n+2 | base64 -w0)"
    FIDO2_CREDENTIAL_ID="$(printf '%s\n' "$cred" | head -1)"
}

fido2_enroll() {
    if [ "$FIDO2_CREDENTIAL_ID" = "" ] ; then
        echo "No credential configured. Creating a new one."
        if ! fido2_create_credential ; then
            echo "Unable to create FIDO2 credential."
            exit 1
        fi

        if [ "$DBG" = "1" ]; then echo "Saving FIDO2 credential ID and public key to config."; fi
        fido2_update_config CREDENTIAL_ID "$FIDO2_CREDENTIAL_ID"
        fido2_update_config CREDENTIAL_PUBKEY "$FIDO2_CREDENTIAL_PUBKEY"
    fi

    local salt=$(fido2_salt_from_blkid)
    local challenge=$(dd if=/dev/urandom bs=1 count=32 2> /dev/null | base64)
    local params="$challenge\n$FIDO2_RELYING_PARTY\n$FIDO2_CREDENTIAL_ID\n$salt"
    if [ "$DBG" = "1" ]; then echo "Assertion parameters: \n$params\n"; fi

    local assertion=$(echo "$params" | fido2-assert -G -h -v $(fido2_device))
    if [ "$DBG" = "1" ]; then echo "Assertion response: \n$assertion\n"; fi
    if [ -z "$assertion" ] ; then
        echo "Unable to generate shared secret."
        exit 1
    fi

    local keyfile=$(fido2_temp_keyfile)

    echo "$assertion" | head -n4 | fido2-assert -V -h $keyfile || (rm -f $keyfile ; exit 1)
    rm -f $keyfile
    R=$(printf '%s\n' "$assertion" | tail -1)
}

if [ "$(id -u)" -ne 0 ]; then
    echo "You must be root." 1>&2
    exit 1
fi

while getopts ":s:d:y:hcv" opt; do
    case $opt in
    s)
        SLOT=$OPTARG
        echo "setting slot to $OPTARG."
        ;;
    d)
        DISK=$OPTARG
        echo "setting disk to $OPTARG."
        ;;
    y)
        if [ ! "$YUBIKEY_LUKS_SLOT" = "$OPTARG" ]; then
           echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
           echo "WARNING: You are enrolling slot $OPTARG of your yubikey."
           echo "During boot, slot $YUBIKEY_LUKS_SLOT is configured to be used ($CONFIG_FILE)."
           echo "You will therefore not be able to boot using this setup!"
           echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        fi
          YUBIKEY_LUKS_SLOT=$OPTARG
          echo "setting yubikey slot to $OPTARG."
          ;;
    c)
        CLEAR_SLOT=1
        echo "clearing slot"
        ;;
    v)  DBG=1
        echo "debugging enabled"
        ;;
    h)
        echo
        echo " -d <partition>: set the partition"
        echo " -s <slot>     : set the LUKS slot"
        echo " -y <slot>     : set the yubikey slot to use"
        echo " -c            : clear the slot prior to writing"
        echo " -v            : show input/output in cleartext"
        echo
        exit 1
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        ;;
    esac
done

echo "This script will utilize the YubiKey slot $YUBIKEY_LUKS_SLOT for slot $SLOT on drive $DISK.  If this is not what you intended, exit now!"

if [ "$CLEAR_SLOT" = "1" ]; then
    echo "Killing LUKS slot $SLOT"
    cryptsetup luksKillSlot "$DISK" "$SLOT"
fi

echo "Adding yubikey to initrd"

while true ; do
    if lsusb | grep -iq 'yubico'; then break; fi
    printf "Please insert a yubikey and press enter."
    read -r _ <&1
done

if [ "$YUBIKEY_LUKS_SLOT" = "fido2" ] ; then
    # Hash and concatenate don't make sense in FIDO2 mode.
    HASH=0
    CONCATENATE=0
    fido2_enroll
else
    P1=$(/lib/cryptsetup/askpass "Please enter the yubikey challenge password. This is the password that will only work while your yubikey is installed in your computer:")
    if [ "$DBG" = "1" ]; then echo "Password: $P1"; fi

    P2=$(/lib/cryptsetup/askpass "Please enter the yubikey challenge password again:")
    if [ "$DBG" = "1" ]; then echo "Password: $P2"; fi

    if [ "$P1" != "$P2" ]; then
        echo "Passwords do not match"
        exit 1
    fi

    if [ "$HASH" = "1" ]; then
        P1=$(printf %s "$P1" | sha256sum | awk '{print $1}')
        if [ "$DBG" = "1" ]; then echo "Password hash: $P1"; fi
    fi

    R="$(printf %s "$P1" | ykchalresp -"$YUBIKEY_LUKS_SLOT" -i- 2>/dev/null || true)"
    if [ "$DBG" = "1" ]; then echo "Yubikey response: $R"; fi

    if [ -z "$R" ]; then
        echo "Yubikey not available or timed out waiting for button press"
        exit 1
    fi
fi

OLD=$(/lib/cryptsetup/askpass "Please provide an existing passphrase. This is NOT the passphrase you just entered, this is the passphrase that you currently use to unlock your LUKS encrypted drive:")
if [ "$DBG" = "1" ]; then echo "Old passphrase: $OLD"; fi

if [ "$CONCATENATE" = "1" ]; then
    printf '%s\n' "$OLD" "$P1$R" "$P1$R" | cryptsetup --key-slot="$SLOT" luksAddKey "$DISK" 2>&1;
    if [ "$DBG" = "1" ]; then echo "LUKS key: $P1$R"; fi
else
    printf '%s\n' "$OLD" "$R" "$R" | cryptsetup --key-slot="$SLOT" luksAddKey "$DISK" 2>&1;
    if [ "$DBG" = "1" ]; then echo "LUKS key: $R"; fi
fi

exit 0
